############### AWS IAM Prep #####################
	1) Login to AWS
	2) Go to IAM > Users > xuanyic > click [Create access key] & download file
	3) Copy key to project folder (or, desired folder)
	
############### Install Terraform #####################
	1) https://learn.hashicorp.com/tutorials/terraform/install-cli
		- Remember to select Linux tab


############### Modules & Directory #####################
	1) Typical folder/module stucture
		$ tree complete-module/
			.
			├── README.md
			├── main.tf
			├── variables.tf
			├── outputs.tf
			├── ...
			├── modules/
			│   ├── nestedA/
			│   │   ├── README.md
			│   │   ├── variables.tf
			│   │   ├── main.tf
			│   │   ├── outputs.tf
			│   ├── nestedB/
			│   ├── .../
			├── examples/
			│   ├── exampleA/
			│   │   ├── main.tf
			│   ├── exampleB/
			│   ├── .../
		*** Note: https$//www.terraform.io/language/modules/develop/structure
	2) Module 
		- A collection of .tf and/or .tf.json files kept together in a directory.
	3) Child Module
		- A module that has been called by another module is often referred to as a child module.
	4) Nested modules
		- Should exist under the modules/ subdirectory
		- With README.md, usable by an external user.
		- Without README.md, for internal use only. 
	5) Published Modules
		- Terraform can load modules from a public or private registry.
			This makes it possible to publish modules for others to use, and
			to use modules that others have published.
		
############### Files, Purpose & Structure #####################
	1) File extention
		- .tf
			> Most files uses this extension
		- .tfvars
			> For storing variables
		*** Note: Files containing Terraform code are often called configuration files.
	2) Typical file names.
		- Provider.tf
			> For storing provider information such as AWS, GCP, etc
		- vars.tf
			> For declaring variables
		- terraform.tfvars
			> For storing actual variable values
		- instance.tf
			> For storing the logic to manage computing resources
	
############### Basic Terraform Commands #####################
	1) $ terraform init
		- Prepares the current working directory for use with Terraform.
		*** Note: Used when creating new directory, it is like "npm init or git init".
	2) $ terraform validate      
		- Check whether the configuration is valid.
	3) $ terraform plan
		- Show changes required by the current configuration.
		- Variations:
			 > $ terraform plan -out "file_name"
	4) $ terraform apply
		- Create or update infrastructure.
	5) $ terraform destroy
		- Destroy previously-created infrastructure.
		*** Note: Do not run this command directly in Production, it will remove all the resources.
	*** Note: https://www.terraform.io/cli/commands/
	
############### Recommended Steps #####################
	1) Safe application of configuration
		- $ terraform plan -out "file_name"	// print the "terraform plan" output to a file
		- $ terraform apply "file_name"		// apply the configuration from a file 
	*** Note: 
		- Udemy course advises to ["terraform plan" to a output file] then ["terraform apply" from the same output fule].
		- For production, it is recommended to use the above.
		- ["terraform apply" without arguments] is a shortcut, it does the above & removes the output file.
		
############### Terraform Functions #####################

	*** Note:
		- https://www.terraform.io/language/functions
		
*** Checkov & Terraform fmt  ***
	checkov -d . --skip-path env
	terraform fmt -check
	
*** Terraform commands  ***			
	tflocal apply -var-file=env/dev.tfvars.json -var aws_account_name="xuanyic" -var aws-account-id="530641219399"
	tflocal plan -var-file=env/dev.tfvars.json -var aws_account_name="xuanyic" -var aws-account-id="530641219399"
	
	tfaa -var-file=env/dev.tfvars.json -var aws_account_name="xuanyic" -var aws-account-id="530641219399"
	tfp -var-file=env/dev.tfvars.json -var aws_account_name="xuanyic" -var aws-account-id="530641219399"

	tfp -var-file=env/dev.tfvars.json -var aws-account-name="xuanyic" -var aws-account-id="530641219399" -var environment=sandbox 
	tfaa -var-file=env/dev.tfvars.json -var aws-account-name="xuanyic" -var aws-account-id="530641219399" -var environment=sandbox 
	tfda -var-file=env/dev.tfvars.json -var aws-account_name="xuanyic" -var aws-account-id="530641219399" -var environment=sandbox 
*** Troubleshooting ***
 - https://www.terraform.io/cli/commands/console
 
*** Note:
	- https://cloud-images.ubuntu.com/locator/ec2/
